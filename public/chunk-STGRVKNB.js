import{Ga as A,Y as I,a as p,b as y,c as E,d as n,da as w,e as D,f as m,fa as c,ga as a,h as g,ha as S,ia as f,la as l,oa as b}from"./chunk-YGP5ZKKQ.js";var R=class u{constructor(t,i){this.authService=t;this.router=i}canActivate(t,i){return this.authService.getUser().pipe(D(s=>s&&s.role==="administrador"?!0:(this.router.navigate(["/home"]),console.log("no es administrador verifica las cosas bien"),!1)))}static \u0275fac=function(i){return new(i||u)(g(b),g(I))};static \u0275prov=m({token:u,factory:u.\u0275fac,providedIn:"root"})};var h=E(A());var $=class u{constructor(t,i){this.firestore=t;this.authService=i}guardarDisponibilidadEspecialidad(t,i,s){return n(this,null,function*(){let r=a(c(this.firestore,"Disponibilidad"),t);yield l(r,{disponibilidad:i,especialidad:s})})}guardarDisponibilidad(t,i){return n(this,null,function*(){let s=a(c(this.firestore,"Disponibilidad"),t);yield l(s,{disponibilidad:i})})}guardarTurnos(t){return n(this,null,function*(){let i=c(this.firestore,"Turnos"),s=t.map(r=>{let o=a(i);return l(o,r)});yield Promise.all(s)})}obtenerTurnos(){return n(this,null,function*(){let t=c(this.firestore,"Turnos"),s=(yield f(t)).docs;return console.log("Turnos disponibles:",s),s})}obtenerTurnosDisponibles(t,i){return n(this,null,function*(){let s=c(this.firestore,"Turnos"),o=(yield f(s)).docs.map(e=>{let d=e.data();return p({id:e.id},d)}).filter(e=>{let d=e.especialista_id===t,T=e.especialidad===i,v=e.estado==="disponible";return console.log(`Turno ID: ${e.id}, Especialista ID: ${e.especialista_id}, Estado: ${e.estado}, Coincide: ${d&&v}`),d&&v&&T});return console.log("Turnos disponibles:",o),o})}obtenerTurnosDisponiblesEspecialista(t){return n(this,null,function*(){let i=c(this.firestore,"Turnos"),r=(yield f(i)).docs.map(o=>{let e=o.data();return p({id:o.id},e)}).filter(o=>{let e=o.especialista_id===t;return console.log(`Turno ID: ${o.id}, Especialista ID: ${o.especialista_id}`),e});return console.log("Turnos solicitados:",r),r})}obtenerTurnosDisponiblesPacienteEspecialista(t,i){return n(this,null,function*(){let s=c(this.firestore,"Turnos"),o=(yield f(s)).docs.map(e=>{let d=e.data();return p({id:e.id},d)}).filter(e=>{let d=e.especialista_id===i,T=e.pacienteId===t;return console.log(`Turno ID: ${e.id}, Paciente ID: ${e.pacienteId}`),T&&d});return console.log("Turnos solicitados:",o),o})}obtenerTurnosDisponiblesPaciente(t){return n(this,null,function*(){let i=c(this.firestore,"Turnos"),r=(yield f(i)).docs.map(o=>{let e=o.data();return p({id:o.id},e)}).filter(o=>{let e=o.pacienteId===t;return console.log(`Turno ID: ${o.id}, Paciente ID: ${o.pacienteId}`),e});return console.log("Turnos solicitados:",r),r})}obtenerTurnosEspecialidad(t){return n(this,null,function*(){let i=c(this.firestore,"Turnos"),r=(yield f(i)).docs.map(o=>{let e=o.data();return p({id:o.id},e)}).filter(o=>{let e=o.especialidad===t;return console.log(`Turno ID: ${o.id}, especialidad : ${o.especialidad}`),e});return console.log("Turnos solicitados:",r),r})}obtenerDisponibilidad(t){return n(this,null,function*(){let i=a(this.firestore,`Disponibilidad/${t}`),s=yield S(i);return s.exists()?s.data().disponibilidad:(console.log("No existe la disponibilidad para este especialista."),null)})}solicitarTurno(t,i){return n(this,null,function*(){let s=a(this.firestore,`Turnos/${t.horario}`);yield l(s,y(p({},t),{estado:"solicitado",pacienteId:i}),{merge:!0})})}cancelarTurno(t,i){return n(this,null,function*(){let s=a(this.firestore,`Turnos/${t}`);yield l(s,{estado:"cancelado",motivoCancelacion:i},{merge:!0})})}aceptarTurno(t){return n(this,null,function*(){let i=a(this.firestore,`Turnos/${t}`);yield l(i,{estado:"aceptado"},{merge:!0})})}finalizarTurno(r,o){return n(this,arguments,function*(t,{diagnostico:i,rese\u00F1a:s}){let e=a(this.firestore,`Turnos/${t}`);yield l(e,{estado:"realizado",rese\u00F1a:s,diagnostico:i},{merge:!0})})}obtenerRese\u00F1aTurno(t){return n(this,null,function*(){let i=a(this.firestore,`Turnos/${t}`);try{let s=yield S(i);if(s.exists()){let r=s.data()?.rese\u00F1a;r?h.default.fire("Rese\xF1a del Turno",r,"info"):h.default.fire("Aviso","No hay rese\xF1a disponible para este turno","info")}else h.default.fire("Error","El turno no existe","error")}catch(s){h.default.fire("Error","No se pudo obtener la rese\xF1a","error"),console.error("Error al obtener rese\xF1a:",s)}})}guardarEncuesta(t){return n(this,null,function*(){let i=c(this.firestore,"encuestas"),s=a(i);yield l(s,t),console.log("Encuesta guardada con \xE9xito")})}guardarCalificacion(t,i){return n(this,null,function*(){let s=a(this.firestore,`Turnos/${t}`);yield l(s,{calificacionTurno:i},{merge:!0})})}static \u0275fac=function(i){return new(i||u)(g(w),g(b))};static \u0275prov=m({token:u,factory:u.\u0275fac,providedIn:"root"})};export{R as a,$ as b};
