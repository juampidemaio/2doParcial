import{Ga as v,a as p,b as D,c as _,d as n,da as w,f as $,fa as c,ga as r,h as m,ha as b,ia as u,ka as I,la as l,na as y,oa as E}from"./chunk-YGP5ZKKQ.js";var f=_(v());var S=class T{constructor(i,s){this.firestore=i;this.authService=s}guardarDisponibilidadEspecialidad(i,s,t){return n(this,null,function*(){let a=`${i}_${t.replace(/\s+/g,"_")}`,e=r(c(this.firestore,"Disponibilidad"),a);yield l(e,{disponibilidad:s,especialidad:t,especialista_id:i})})}guardarDisponibilidad(i,s){return n(this,null,function*(){let t=r(c(this.firestore,"Disponibilidad"),i);yield l(t,{disponibilidad:s})})}guardarTurnos(i){return n(this,null,function*(){let s=c(this.firestore,"Turnos"),t=i.map(a=>{let e=r(s);return l(e,a)});yield Promise.all(t)})}obtenerTurnos(){return n(this,null,function*(){let i=c(this.firestore,"Turnos"),t=(yield u(i)).docs;return console.log("Turnos disponibles:",t),t})}obtenerTurnosDisponibles(i,s){return n(this,null,function*(){let t=c(this.firestore,"Turnos"),e=(yield u(t)).docs.map(o=>{let d=o.data();return p({id:o.id},d)}).filter(o=>{let d=o.especialista_id===i,g=o.especialidad===s,h=o.estado==="disponible";return console.log(`Turno ID: ${o.id}, Especialista ID: ${o.especialista_id}, Estado: ${o.estado}, Coincide: ${d&&h}`),d&&h&&g});return console.log("Turnos disponibles:",e),e})}obtenerTurnosDisponiblesEspecialista(i){return n(this,null,function*(){let s=c(this.firestore,"Turnos"),a=(yield u(s)).docs.map(e=>{let o=e.data();return p({id:e.id},o)}).filter(e=>{let o=e.especialista_id===i;return console.log(`Turno ID: ${e.id}, Especialista ID: ${e.especialista_id}`),o});return console.log("Turnos solicitados:",a),a})}obtenerTurnosDisponiblesPacienteEspecialista(i,s){return n(this,null,function*(){let t=c(this.firestore,"Turnos"),e=(yield u(t)).docs.map(o=>{let d=o.data();return p({id:o.id},d)}).filter(o=>{let d=o.especialista_id===s,g=o.pacienteId===i;return console.log(`Turno ID: ${o.id}, Paciente ID: ${o.pacienteId}`),g&&d});return console.log("Turnos solicitados:",e),e})}obtenerTurnosDisponiblesPaciente(i){return n(this,null,function*(){let s=c(this.firestore,"Turnos"),a=(yield u(s)).docs.map(e=>{let o=e.data();return p({id:e.id},o)}).filter(e=>{let o=e.pacienteId===i;return console.log(`Turno ID: ${e.id}, Paciente ID: ${e.pacienteId}`),o});return console.log("Turnos solicitados:",a),a})}obtenerTurnosEspecialidad(i){return n(this,null,function*(){let s=c(this.firestore,"Turnos"),a=(yield u(s)).docs.map(e=>{let o=e.data();return p({id:e.id},o)}).filter(e=>{let o=e.especialidad===i;return console.log(`Turno ID: ${e.id}, especialidad : ${e.especialidad}`),o});return console.log("Turnos solicitados:",a),a})}obtenerDisponibilidadEspecialista(i,s){return n(this,null,function*(){let t=c(this.firestore,"Disponibilidad"),a=I(t,y("especialista_id","==",i),y("especialidad","==",s)),e=yield u(a);return e.empty?(console.log("No existe la disponibilidad para este especialista y especialidad."),null):e.docs[0].data().disponibilidad})}obtenerDisponibilidad(i){return n(this,null,function*(){let s=r(this.firestore,`Disponibilidad/${i}`),t=yield b(s);return t.exists()?t.data().disponibilidad:(console.log("No existe la disponibilidad para este especialista."),null)})}solicitarTurno(i,s){return n(this,null,function*(){let t=r(this.firestore,`Turnos/${i.horario}`);yield l(t,D(p({},i),{estado:"solicitado",pacienteId:s}),{merge:!0})})}cancelarTurno(i,s){return n(this,null,function*(){let t=r(this.firestore,`Turnos/${i}`);yield l(t,{estado:"cancelado",motivoCancelacion:s},{merge:!0})})}aceptarTurno(i){return n(this,null,function*(){let s=r(this.firestore,`Turnos/${i}`);yield l(s,{estado:"aceptado"},{merge:!0})})}finalizarTurno(a,e){return n(this,arguments,function*(i,{diagnostico:s,rese\u00F1a:t}){let o=r(this.firestore,`Turnos/${i}`);yield l(o,{estado:"realizado",rese\u00F1a:t,diagnostico:s},{merge:!0})})}finalizarTurnoHistoriaClinica(t,a){return n(this,arguments,function*(i,{historiaClinica:s}){let e=i.pacienteId,o=i.especialidad,d=i.especialista,g=i.fecha,h=i.especialista_id,R=`turno_${g}_${o}`,C=r(this.firestore,`historiaClinica/${e}`);yield l(C,{turnos:{[R]:p({especialidad:o,nombreEspecialista:d,idEspecialista:h,fechaTurno:g},s)}},{merge:!0})})}obtenerHistoriaClinica(i){return n(this,null,function*(){let s=r(this.firestore,`historiaClinica/${i}`),t=yield b(s);if(t.exists()){let e=t.data()?.turnos;if(e)return e}else return console.log("No existe el documento del paciente."),null})}obtenerRese\u00F1aTurno(i){return n(this,null,function*(){let s=r(this.firestore,`Turnos/${i}`);try{let t=yield b(s);if(t.exists()){let a=t.data()?.rese\u00F1a;a?f.default.fire("Rese\xF1a del Turno",a,"info"):f.default.fire("Aviso","No hay rese\xF1a disponible para este turno","info")}else f.default.fire("Error","El turno no existe","error")}catch(t){f.default.fire("Error","No se pudo obtener la rese\xF1a","error"),console.error("Error al obtener rese\xF1a:",t)}})}guardarEncuesta(i,s){return n(this,null,function*(){let t=r(this.firestore,`Turnos/${i}`);yield l(t,{encuesta:s},{merge:!0}),console.log("Encuesta guardada con \xE9xito")})}guardarCalificacion(i,s){return n(this,null,function*(){let t=r(this.firestore,`Turnos/${i}`);yield l(t,{calificacionTurno:s},{merge:!0})})}static \u0275fac=function(s){return new(s||T)(m(w),m(E))};static \u0275prov=$({token:T,factory:T.\u0275fac,providedIn:"root"})};export{S as a};
