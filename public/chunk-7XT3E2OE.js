import{Ga as x,Y as $,a as p,b as D,c as j,d as a,da as w,e as I,f as T,fa as c,ga as r,h,ha as v,ia as u,ka as R,la as l,na as S,oa as y}from"./chunk-YGP5ZKKQ.js";var E=class f{constructor(i,t){this.authService=i;this.router=t}canActivate(i,t){return this.authService.getUser().pipe(I(s=>s&&s.role==="administrador"?!0:(this.router.navigate(["/home"]),console.log("no es administrador verifica las cosas bien"),!1)))}static \u0275fac=function(t){return new(t||f)(h(y),h($))};static \u0275prov=T({token:f,factory:f.\u0275fac,providedIn:"root"})};var m=j(x());var C=class f{constructor(i,t){this.firestore=i;this.authService=t}guardarDisponibilidadEspecialidad(i,t,s){return a(this,null,function*(){let n=`${i}_${s.replace(/\s+/g,"_")}`,e=r(c(this.firestore,"Disponibilidad"),n);yield l(e,{disponibilidad:t,especialidad:s,especialista_id:i})})}guardarDisponibilidad(i,t){return a(this,null,function*(){let s=r(c(this.firestore,"Disponibilidad"),i);yield l(s,{disponibilidad:t})})}guardarTurnos(i){return a(this,null,function*(){let t=c(this.firestore,"Turnos"),s=i.map(n=>{let e=r(t);return l(e,n)});yield Promise.all(s)})}obtenerTurnos(){return a(this,null,function*(){let i=c(this.firestore,"Turnos"),s=(yield u(i)).docs;return console.log("Turnos disponibles:",s),s})}obtenerTurnosDisponibles(i,t){return a(this,null,function*(){let s=c(this.firestore,"Turnos"),e=(yield u(s)).docs.map(o=>{let d=o.data();return p({id:o.id},d)}).filter(o=>{let d=o.especialista_id===i,g=o.especialidad===t,b=o.estado==="disponible";return console.log(`Turno ID: ${o.id}, Especialista ID: ${o.especialista_id}, Estado: ${o.estado}, Coincide: ${d&&b}`),d&&b&&g});return console.log("Turnos disponibles:",e),e})}obtenerTurnosDisponiblesEspecialista(i){return a(this,null,function*(){let t=c(this.firestore,"Turnos"),n=(yield u(t)).docs.map(e=>{let o=e.data();return p({id:e.id},o)}).filter(e=>{let o=e.especialista_id===i;return console.log(`Turno ID: ${e.id}, Especialista ID: ${e.especialista_id}`),o});return console.log("Turnos solicitados:",n),n})}obtenerTurnosDisponiblesPacienteEspecialista(i,t){return a(this,null,function*(){let s=c(this.firestore,"Turnos"),e=(yield u(s)).docs.map(o=>{let d=o.data();return p({id:o.id},d)}).filter(o=>{let d=o.especialista_id===t,g=o.pacienteId===i;return console.log(`Turno ID: ${o.id}, Paciente ID: ${o.pacienteId}`),g&&d});return console.log("Turnos solicitados:",e),e})}obtenerTurnosDisponiblesPaciente(i){return a(this,null,function*(){let t=c(this.firestore,"Turnos"),n=(yield u(t)).docs.map(e=>{let o=e.data();return p({id:e.id},o)}).filter(e=>{let o=e.pacienteId===i;return console.log(`Turno ID: ${e.id}, Paciente ID: ${e.pacienteId}`),o});return console.log("Turnos solicitados:",n),n})}obtenerTurnosEspecialidad(i){return a(this,null,function*(){let t=c(this.firestore,"Turnos"),n=(yield u(t)).docs.map(e=>{let o=e.data();return p({id:e.id},o)}).filter(e=>{let o=e.especialidad===i;return console.log(`Turno ID: ${e.id}, especialidad : ${e.especialidad}`),o});return console.log("Turnos solicitados:",n),n})}obtenerDisponibilidadEspecialista(i,t){return a(this,null,function*(){let s=c(this.firestore,"Disponibilidad"),n=R(s,S("especialista_id","==",i),S("especialidad","==",t)),e=yield u(n);return e.empty?(console.log("No existe la disponibilidad para este especialista y especialidad."),null):e.docs[0].data().disponibilidad})}obtenerDisponibilidad(i){return a(this,null,function*(){let t=r(this.firestore,`Disponibilidad/${i}`),s=yield v(t);return s.exists()?s.data().disponibilidad:(console.log("No existe la disponibilidad para este especialista."),null)})}solicitarTurno(i,t){return a(this,null,function*(){let s=r(this.firestore,`Turnos/${i.horario}`);yield l(s,D(p({},i),{estado:"solicitado",pacienteId:t}),{merge:!0})})}cancelarTurno(i,t){return a(this,null,function*(){let s=r(this.firestore,`Turnos/${i}`);yield l(s,{estado:"cancelado",motivoCancelacion:t},{merge:!0})})}aceptarTurno(i){return a(this,null,function*(){let t=r(this.firestore,`Turnos/${i}`);yield l(t,{estado:"aceptado"},{merge:!0})})}finalizarTurno(n,e){return a(this,arguments,function*(i,{diagnostico:t,rese\u00F1a:s}){let o=r(this.firestore,`Turnos/${i}`);yield l(o,{estado:"realizado",rese\u00F1a:s,diagnostico:t},{merge:!0})})}finalizarTurnoHistoriaClinica(s,n){return a(this,arguments,function*(i,{historiaClinica:t}){let e=i.pacienteId,o=i.especialidad,d=i.especialista,g=i.fecha,b=i.especialista_id,A=`turno_${g}_${o}`,_=r(this.firestore,`historiaClinica/${e}`);yield l(_,{turnos:{[A]:p({especialidad:o,nombreEspecialista:d,idEspecialista:b,fechaTurno:g},t)}},{merge:!0})})}obtenerRese\u00F1aTurno(i){return a(this,null,function*(){let t=r(this.firestore,`Turnos/${i}`);try{let s=yield v(t);if(s.exists()){let n=s.data()?.rese\u00F1a;n?m.default.fire("Rese\xF1a del Turno",n,"info"):m.default.fire("Aviso","No hay rese\xF1a disponible para este turno","info")}else m.default.fire("Error","El turno no existe","error")}catch(s){m.default.fire("Error","No se pudo obtener la rese\xF1a","error"),console.error("Error al obtener rese\xF1a:",s)}})}guardarEncuesta(i,t){return a(this,null,function*(){let s=r(this.firestore,`Turnos/${i}`);yield l(s,{encuesta:t},{merge:!0}),console.log("Encuesta guardada con \xE9xito")})}guardarCalificacion(i,t){return a(this,null,function*(){let s=r(this.firestore,`Turnos/${i}`);yield l(s,{calificacionTurno:t},{merge:!0})})}static \u0275fac=function(t){return new(t||f)(h(w),h(y))};static \u0275prov=T({token:f,factory:f.\u0275fac,providedIn:"root"})};export{E as a,C as b};
