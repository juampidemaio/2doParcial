import{Ga as j,Y as I,a as f,b as D,c as C,d as a,da as R,e as w,f as b,fa as r,ga as c,h as g,ha as y,ia as p,ka as $,la as l,na as S,oa as m}from"./chunk-YGP5ZKKQ.js";var E=class u{constructor(i,t){this.authService=i;this.router=t}canActivate(i,t){return this.authService.getUser().pipe(w(s=>s&&s.role==="administrador"?!0:(this.router.navigate(["/home"]),console.log("no es administrador verifica las cosas bien"),!1)))}static \u0275fac=function(t){return new(t||u)(g(m),g(I))};static \u0275prov=b({token:u,factory:u.\u0275fac,providedIn:"root"})};var h=C(j());var A=class u{constructor(i,t){this.firestore=i;this.authService=t}guardarDisponibilidadEspecialidad(i,t,s){return a(this,null,function*(){let n=`${i}_${s.replace(/\s+/g,"_")}`,e=c(r(this.firestore,"Disponibilidad"),n);yield l(e,{disponibilidad:t,especialidad:s,especialista_id:i})})}guardarDisponibilidad(i,t){return a(this,null,function*(){let s=c(r(this.firestore,"Disponibilidad"),i);yield l(s,{disponibilidad:t})})}guardarTurnos(i){return a(this,null,function*(){let t=r(this.firestore,"Turnos"),s=i.map(n=>{let e=c(t);return l(e,n)});yield Promise.all(s)})}obtenerTurnos(){return a(this,null,function*(){let i=r(this.firestore,"Turnos"),s=(yield p(i)).docs;return console.log("Turnos disponibles:",s),s})}obtenerTurnosDisponibles(i,t){return a(this,null,function*(){let s=r(this.firestore,"Turnos"),e=(yield p(s)).docs.map(o=>{let d=o.data();return f({id:o.id},d)}).filter(o=>{let d=o.especialista_id===i,T=o.especialidad===t,v=o.estado==="disponible";return console.log(`Turno ID: ${o.id}, Especialista ID: ${o.especialista_id}, Estado: ${o.estado}, Coincide: ${d&&v}`),d&&v&&T});return console.log("Turnos disponibles:",e),e})}obtenerTurnosDisponiblesEspecialista(i){return a(this,null,function*(){let t=r(this.firestore,"Turnos"),n=(yield p(t)).docs.map(e=>{let o=e.data();return f({id:e.id},o)}).filter(e=>{let o=e.especialista_id===i;return console.log(`Turno ID: ${e.id}, Especialista ID: ${e.especialista_id}`),o});return console.log("Turnos solicitados:",n),n})}obtenerTurnosDisponiblesPacienteEspecialista(i,t){return a(this,null,function*(){let s=r(this.firestore,"Turnos"),e=(yield p(s)).docs.map(o=>{let d=o.data();return f({id:o.id},d)}).filter(o=>{let d=o.especialista_id===t,T=o.pacienteId===i;return console.log(`Turno ID: ${o.id}, Paciente ID: ${o.pacienteId}`),T&&d});return console.log("Turnos solicitados:",e),e})}obtenerTurnosDisponiblesPaciente(i){return a(this,null,function*(){let t=r(this.firestore,"Turnos"),n=(yield p(t)).docs.map(e=>{let o=e.data();return f({id:e.id},o)}).filter(e=>{let o=e.pacienteId===i;return console.log(`Turno ID: ${e.id}, Paciente ID: ${e.pacienteId}`),o});return console.log("Turnos solicitados:",n),n})}obtenerTurnosEspecialidad(i){return a(this,null,function*(){let t=r(this.firestore,"Turnos"),n=(yield p(t)).docs.map(e=>{let o=e.data();return f({id:e.id},o)}).filter(e=>{let o=e.especialidad===i;return console.log(`Turno ID: ${e.id}, especialidad : ${e.especialidad}`),o});return console.log("Turnos solicitados:",n),n})}obtenerDisponibilidadEspecialista(i,t){return a(this,null,function*(){let s=r(this.firestore,"Disponibilidad"),n=$(s,S("especialista_id","==",i),S("especialidad","==",t)),e=yield p(n);return e.empty?(console.log("No existe la disponibilidad para este especialista y especialidad."),null):e.docs[0].data().disponibilidad})}obtenerDisponibilidad(i){return a(this,null,function*(){let t=c(this.firestore,`Disponibilidad/${i}`),s=yield y(t);return s.exists()?s.data().disponibilidad:(console.log("No existe la disponibilidad para este especialista."),null)})}solicitarTurno(i,t){return a(this,null,function*(){let s=c(this.firestore,`Turnos/${i.horario}`);yield l(s,D(f({},i),{estado:"solicitado",pacienteId:t}),{merge:!0})})}cancelarTurno(i,t){return a(this,null,function*(){let s=c(this.firestore,`Turnos/${i}`);yield l(s,{estado:"cancelado",motivoCancelacion:t},{merge:!0})})}aceptarTurno(i){return a(this,null,function*(){let t=c(this.firestore,`Turnos/${i}`);yield l(t,{estado:"aceptado"},{merge:!0})})}finalizarTurno(n,e){return a(this,arguments,function*(i,{diagnostico:t,rese\u00F1a:s}){let o=c(this.firestore,`Turnos/${i}`);yield l(o,{estado:"realizado",rese\u00F1a:s,diagnostico:t},{merge:!0})})}obtenerRese\u00F1aTurno(i){return a(this,null,function*(){let t=c(this.firestore,`Turnos/${i}`);try{let s=yield y(t);if(s.exists()){let n=s.data()?.rese\u00F1a;n?h.default.fire("Rese\xF1a del Turno",n,"info"):h.default.fire("Aviso","No hay rese\xF1a disponible para este turno","info")}else h.default.fire("Error","El turno no existe","error")}catch(s){h.default.fire("Error","No se pudo obtener la rese\xF1a","error"),console.error("Error al obtener rese\xF1a:",s)}})}guardarEncuesta(i){return a(this,null,function*(){let t=r(this.firestore,"encuestas"),s=c(t);yield l(s,i),console.log("Encuesta guardada con \xE9xito")})}guardarCalificacion(i,t){return a(this,null,function*(){let s=c(this.firestore,`Turnos/${i}`);yield l(s,{calificacionTurno:t},{merge:!0})})}static \u0275fac=function(t){return new(t||u)(g(R),g(m))};static \u0275prov=b({token:u,factory:u.\u0275fac,providedIn:"root"})};export{E as a,A as b};
